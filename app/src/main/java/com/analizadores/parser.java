
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package com.analizadores;

import java_cup.runtime.*;
import java.util.ArrayList;
import java.util.List;
import com.objetos.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(Scanner s, SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\010\000\002\002" +
    "\010\000\002\002\010\000\002\002\010\000\002\002\003" +
    "\000\002\023\003\000\002\003\004\000\002\003\004\000" +
    "\002\003\004\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\002\000\002\022\003\000\002\004\004\000\002\004\004" +
    "\000\002\004\004\000\002\004\004\000\002\004\004\000" +
    "\002\004\002\000\002\005\006\000\002\006\006\000\002" +
    "\006\006\000\002\007\010\000\002\010\006\000\002\011" +
    "\010\000\002\012\010\000\002\017\007\000\002\017\011" +
    "\000\002\017\003\000\002\013\006\000\002\013\004\000" +
    "\002\015\010\000\002\014\010\000\002\016\005\000\002" +
    "\016\003\000\002\016\003\000\002\021\005\000\002\021" +
    "\003\000\002\024\005\000\002\024\005\000\002\024\005" +
    "\000\002\024\005\000\002\024\003\000\002\024\005\000" +
    "\002\024\003\000\002\025\005\000\002\025\005\000\002" +
    "\025\005\000\002\025\005\000\002\025\003\000\002\025" +
    "\003\000\002\025\005\000\002\025\003\000\002\020\010" +
    "\000\002\020\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\006\003\004\024\005\001\002\000\004\002" +
    "\ufffc\001\002\000\006\025\010\026\011\001\002\000\004" +
    "\002\007\001\002\000\004\002\001\001\002\000\004\014" +
    "\165\001\002\000\004\014\012\001\002\000\024\003\025" +
    "\015\ufff2\027\014\032\031\033\022\034\027\035\026\040" +
    "\017\041\032\001\002\000\024\003\025\015\ufff2\027\014" +
    "\032\031\033\022\034\027\035\026\040\017\041\032\001" +
    "\002\000\004\022\161\001\002\000\024\003\025\015\ufff2" +
    "\027\014\032\031\033\022\034\027\035\026\040\017\041" +
    "\032\001\002\000\024\003\025\015\ufff2\027\014\032\031" +
    "\033\022\034\027\035\026\040\017\041\032\001\002\000" +
    "\004\022\154\001\002\000\024\003\025\015\ufff2\027\014" +
    "\032\031\033\022\034\027\035\026\040\017\041\032\001" +
    "\002\000\004\015\142\001\002\000\004\022\114\001\002" +
    "\000\024\003\025\015\ufff2\027\014\032\031\033\022\034" +
    "\027\035\026\040\017\041\032\001\002\000\024\003\025" +
    "\015\ufff2\027\014\032\031\033\022\034\027\035\026\040" +
    "\017\041\032\001\002\000\024\003\025\015\ufff2\027\014" +
    "\032\031\033\022\034\027\035\026\040\017\041\110\001" +
    "\002\000\004\022\103\001\002\000\004\022\051\001\002" +
    "\000\024\003\025\015\ufff2\027\014\032\031\033\022\034" +
    "\027\035\026\040\017\041\032\001\002\000\004\022\037" +
    "\001\002\000\004\022\034\001\002\000\004\015\ufffb\001" +
    "\002\000\004\043\035\001\002\000\004\023\036\001\002" +
    "\000\024\003\uffe0\015\uffe0\027\uffe0\032\uffe0\033\uffe0\034" +
    "\uffe0\035\uffe0\040\uffe0\041\uffe0\001\002\000\004\016\040" +
    "\001\002\000\006\003\043\043\042\001\002\000\004\017" +
    "\046\001\002\000\006\017\uffdb\021\044\001\002\000\004" +
    "\017\uffda\001\002\000\006\003\043\043\042\001\002\000" +
    "\004\017\uffdc\001\002\000\004\023\047\001\002\000\024" +
    "\003\uffe7\015\uffe7\027\uffe7\032\uffe7\033\uffe7\034\uffe7\035" +
    "\uffe7\040\uffe7\041\uffe7\001\002\000\004\015\ufff9\001\002" +
    "\000\004\016\052\001\002\000\006\003\053\014\054\001" +
    "\002\000\004\017\uffe1\001\002\000\010\003\060\004\063" +
    "\012\061\001\002\000\004\017\056\001\002\000\004\023" +
    "\057\001\002\000\030\003\uffe4\015\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\040\uffe4\041" +
    "\uffe4\001\002\000\020\006\uffd1\007\uffd1\010\uffd1\011\uffd1" +
    "\013\uffd1\015\uffd1\021\uffd1\001\002\000\010\003\060\004" +
    "\063\012\061\001\002\000\014\006\066\007\070\010\067" +
    "\011\065\021\064\001\002\000\020\006\uffd3\007\uffd3\010" +
    "\uffd3\011\uffd3\013\uffd3\015\uffd3\021\uffd3\001\002\000\010" +
    "\003\060\004\063\012\061\001\002\000\010\003\060\004" +
    "\063\012\061\001\002\000\010\003\060\004\063\012\061" +
    "\001\002\000\010\003\060\004\063\012\061\001\002\000" +
    "\010\003\060\004\063\012\061\001\002\000\020\006\uffd6" +
    "\007\uffd6\010\067\011\065\013\uffd6\015\uffd6\021\uffd6\001" +
    "\002\000\020\006\uffd5\007\uffd5\010\uffd5\011\uffd5\013\uffd5" +
    "\015\uffd5\021\uffd5\001\002\000\020\006\uffd7\007\uffd7\010" +
    "\067\011\065\013\uffd7\015\uffd7\021\uffd7\001\002\000\020" +
    "\006\uffd4\007\uffd4\010\uffd4\011\uffd4\013\uffd4\015\uffd4\021" +
    "\uffd4\001\002\000\014\006\066\007\070\010\067\011\065" +
    "\015\076\001\002\000\006\017\uffe3\021\077\001\002\000" +
    "\006\003\053\014\054\001\002\000\004\017\uffe2\001\002" +
    "\000\014\006\066\007\070\010\067\011\065\013\102\001" +
    "\002\000\020\006\uffd2\007\uffd2\010\uffd2\011\uffd2\013\uffd2" +
    "\015\uffd2\021\uffd2\001\002\000\006\036\104\037\105\001" +
    "\002\000\004\023\107\001\002\000\004\023\106\001\002" +
    "\000\024\003\uffe9\015\uffe9\027\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\035\uffe9\040\uffe9\041\uffe9\001\002\000\024\003\uffe8" +
    "\015\uffe8\027\uffe8\032\uffe8\033\uffe8\034\uffe8\035\uffe8\040" +
    "\uffe8\041\uffe8\001\002\000\026\003\uffdf\015\uffdf\022\034" +
    "\027\uffdf\032\uffdf\033\uffdf\034\uffdf\035\uffdf\040\uffdf\041" +
    "\uffdf\001\002\000\004\015\ufff3\001\002\000\004\015\ufff6" +
    "\001\002\000\004\015\ufff5\001\002\000\004\016\115\001" +
    "\002\000\012\003\117\004\123\005\122\012\121\001\002" +
    "\000\016\006\126\007\130\010\131\011\125\017\uffd8\021" +
    "\140\001\002\000\022\006\uffc9\007\uffc9\010\uffc9\011\uffc9" +
    "\013\uffc9\017\uffc9\021\uffc9\023\uffc9\001\002\000\004\017" +
    "\136\001\002\000\012\003\117\004\123\005\122\012\121" +
    "\001\002\000\022\006\uffcb\007\uffcb\010\uffcb\011\uffcb\013" +
    "\uffcb\017\uffcb\021\uffcb\023\uffcb\001\002\000\022\006\uffcc" +
    "\007\uffcc\010\uffcc\011\uffcc\013\uffcc\017\uffcc\021\uffcc\023" +
    "\uffcc\001\002\000\014\006\126\007\130\010\131\011\125" +
    "\013\127\001\002\000\012\003\117\004\123\005\122\012" +
    "\121\001\002\000\012\003\117\004\123\005\122\012\121" +
    "\001\002\000\022\006\uffca\007\uffca\010\uffca\011\uffca\013" +
    "\uffca\017\uffca\021\uffca\023\uffca\001\002\000\012\003\117" +
    "\004\123\005\122\012\121\001\002\000\012\003\117\004" +
    "\123\005\122\012\121\001\002\000\022\006\uffce\007\uffce" +
    "\010\uffce\011\uffce\013\uffce\017\uffce\021\uffce\023\uffce\001" +
    "\002\000\022\006\uffcf\007\uffcf\010\131\011\125\013\uffcf" +
    "\017\uffcf\021\uffcf\023\uffcf\001\002\000\022\006\uffd0\007" +
    "\uffd0\010\131\011\125\013\uffd0\017\uffd0\021\uffd0\023\uffd0" +
    "\001\002\000\022\006\uffcd\007\uffcd\010\uffcd\011\uffcd\013" +
    "\uffcd\017\uffcd\021\uffcd\023\uffcd\001\002\000\004\023\137" +
    "\001\002\000\024\003\uffe5\015\uffe5\027\uffe5\032\uffe5\033" +
    "\uffe5\034\uffe5\035\uffe5\040\uffe5\041\uffe5\001\002\000\012" +
    "\003\117\004\123\005\122\012\121\001\002\000\004\017" +
    "\uffd9\001\002\000\012\002\uffc7\003\004\024\005\042\143" +
    "\001\002\000\004\012\146\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\ufffd\001\002\000\004\043\147\001\002" +
    "\000\004\013\150\001\002\000\004\023\151\001\002\000" +
    "\006\002\uffc7\042\143\001\002\000\004\002\uffc8\001\002" +
    "\000\004\015\ufff4\001\002\000\012\003\117\004\123\005" +
    "\122\012\121\001\002\000\014\006\126\007\130\010\131" +
    "\011\125\023\156\001\002\000\024\003\uffe6\015\uffe6\027" +
    "\uffe6\032\uffe6\033\uffe6\034\uffe6\035\uffe6\040\uffe6\041\uffe6" +
    "\001\002\000\004\015\ufff7\001\002\000\004\015\ufff8\001" +
    "\002\000\004\043\162\001\002\000\004\023\163\001\002" +
    "\000\030\003\uffea\015\uffea\027\uffea\030\uffea\031\uffea\032" +
    "\uffea\033\uffea\034\uffea\035\uffea\040\uffea\041\uffea\001\002" +
    "\000\004\015\ufffa\001\002\000\016\003\176\015\uffeb\027" +
    "\014\030\171\031\170\034\027\001\002\000\004\015\216" +
    "\001\002\000\016\003\176\015\uffeb\027\014\030\171\031" +
    "\170\034\027\001\002\000\004\022\210\001\002\000\004" +
    "\022\203\001\002\000\016\003\176\015\uffeb\027\014\030" +
    "\171\031\170\034\027\001\002\000\016\003\176\015\uffeb" +
    "\027\014\030\171\031\170\034\027\001\002\000\004\015" +
    "\ufff1\001\002\000\016\003\176\015\uffeb\027\014\030\171" +
    "\031\170\034\027\001\002\000\016\003\176\015\uffeb\027" +
    "\014\030\171\031\170\034\027\001\002\000\004\015\uffec" +
    "\001\002\000\004\015\uffed\001\002\000\004\015\uffee\001" +
    "\002\000\004\015\uffef\001\002\000\004\016\204\001\002" +
    "\000\006\003\043\043\042\001\002\000\004\017\206\001" +
    "\002\000\004\023\207\001\002\000\016\003\uffdd\015\uffdd" +
    "\027\uffdd\030\uffdd\031\uffdd\034\uffdd\001\002\000\004\016" +
    "\211\001\002\000\012\003\117\004\123\005\122\012\121" +
    "\001\002\000\004\017\213\001\002\000\004\023\214\001" +
    "\002\000\016\003\uffde\015\uffde\027\uffde\030\uffde\031\uffde" +
    "\034\uffde\001\002\000\004\015\ufff0\001\002\000\012\002" +
    "\uffc7\003\004\024\005\042\143\001\002\000\004\002\000" +
    "\001\002\000\004\002\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\216\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\032\005\012\006" +
    "\027\007\014\010\015\011\023\012\022\013\017\023\020" +
    "\001\001\000\022\003\163\005\012\006\027\007\014\010" +
    "\015\011\023\012\022\013\017\001\001\000\002\001\001" +
    "\000\022\003\157\005\012\006\027\007\014\010\015\011" +
    "\023\012\022\013\017\001\001\000\022\003\156\005\012" +
    "\006\027\007\014\010\015\011\023\012\022\013\017\001" +
    "\001\000\002\001\001\000\022\003\152\005\012\006\027" +
    "\007\014\010\015\011\023\012\022\013\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\112\005\012" +
    "\006\027\007\014\010\015\011\023\012\022\013\017\001" +
    "\001\000\022\003\111\005\012\006\027\007\014\010\015" +
    "\011\023\012\022\013\017\001\001\000\022\003\110\005" +
    "\012\006\027\007\014\010\015\011\023\012\022\013\017" +
    "\001\001\000\002\001\001\000\002\001\001\000\022\003" +
    "\047\005\012\006\027\007\014\010\015\011\023\012\022" +
    "\013\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\040\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\016\044\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\054\001\001\000\002\001\001\000\004\024\061\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\024\100\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\024\074\001\001\000\004" +
    "\024\073\001\001\000\004\024\072\001\001\000\004\024" +
    "\071\001\001\000\004\024\070\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\021\117\025\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\025\123\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\025\134\001\001\000\004\025\133\001\001\000\002" +
    "\001\001\000\004\025\132\001\001\000\004\025\131\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\021\140\025\115\001\001\000\002\001\001\000\006" +
    "\002\144\020\143\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\020\151\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\025\154\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\004\173\005\166\012\174\014" +
    "\171\015\172\022\165\001\001\000\002\001\001\000\014" +
    "\004\214\005\166\012\174\014\171\015\172\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\004\201\005\166" +
    "\012\174\014\171\015\172\001\001\000\014\004\200\005" +
    "\166\012\174\014\171\015\172\001\001\000\002\001\001" +
    "\000\014\004\177\005\166\012\174\014\171\015\172\001" +
    "\001\000\014\004\176\005\166\012\174\014\171\015\172" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\204" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\021\211\025\115\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\002\217\020\216\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public Symbol do_action(
    int                        act_num,
    lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




        private ArrayList<grafico> graficas=new ArrayList<>();
	private grafico graficoN = new grafico();
//	private boolean errorRepeticion;
	private ArrayList<errorE> errorSin= new ArrayList<>();
	//private ContGraficos contGraficos = new ContGraficos();
	private ArrayList<countOperacion> operacionesList = new ArrayList<>();
        private ArrayList<String> listGraficasEjecucion = new ArrayList<>();
        private int contadorBarras=0;
        private int contadorPie=0;

        public void aumentarPie(){
                contadorPie++;
        }

        public void aumentarBarras(){
                contadorBarras++;
        }

        public int getCountBarras(){
                return contadorBarras;
        }

        public int getcountPie(){
                return contadorPie;
        }

        public  ArrayList<String>  getListGraficasEjecucion(){
		return listGraficasEjecucion;
	}


        

        public parser(AnalizadorLexico lex){
        super(lex);
        }

 public void syntax_error(Symbol cur_token) {
        System.out.println("El error es el simbolo: " + sym.terminalNames[cur_token.sym]);
        System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
        //Token token = (Token) tok.value;
	//List<Integer> listEscape=expected_token_ids();
	//String descripcion = "Se esperaba "+ sym.terminalNames[listEscape.get(0)];
	//errors.add(new error(token.getLexeme(), token.getLine(), token.getColumn(), descripcion));
     errorSin.add(new errorE(sym.terminalNames[cur_token.sym], cur_token.left, cur_token.right,"Se esperaba","Sintactico"));
    }

    public void unrecovered_syntax_error(Symbol cur_token) {
        if (cur_token.sym == sym.EOF) {
            // System.out.println("El error es el simbolo: " + sym.terminalNames[cur_token.sym]);
        //System.out.println(String.format("En la posicion: %d, %d", cur_token.left, cur_token.right));
        }
    }

        //metodo para quitar las "
        public String limpiarLexeme(String lexeme){
		return lexeme = lexeme.replace("\"", "");
	}



       //Retorna list de operadores
        public ArrayList getListOperaciones(){ 
	        return operacionesList;
	    }
        //Retorna list de graficas
        public ArrayList getListGraficas(){ 
	        return graficas;
	    }

        //Retorna list de errores
        public ArrayList getListErroresSin(){ 
	        return errorSin;
	    }



      private String tokenEsperado(int token){
                if(token==5)return "linea";
                else if(token==16)return "*";
                else if(token==17)return "/";
                else if(token==14)return "+";
                else if(token==4)return "curva";
                else if(token==11)return "animar";
                else if(token==3)return "color";
                else if(token==7)return "cuadrado";
                else if(token==12)return "objeto";
                else if(token==10)return "graficar";
                else if(token==20)return ",";
                else if(token==9)return "poligono";
                else if(token==6)return "circulo";
                else if(token==2)return "entero";
                else if(token==13)return "anterior";
                else if(token==19)return ")";
                else if(token==18)return "(";
                else if(token==8)return "rectangulo";
                else if(token==15)return "-";
                else return " ";
        }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws Exception
    {
      /* Symbol object for return from actions */
      Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object start_val = (Object)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= DEF BARRAS LLAVEA INTERBARRAS LLAVEC EJECUCION 
            {
              Object RESULT =null;
		System.out.println("def barras");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= DEF PIE LLAVEA INTERPIE LLAVEC EJECUCION 
            {
              Object RESULT =null;
		System.out.println("def pie");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= DEF BARRAS LLAVEA INTERBARRAS LLAVEC INICIO 
            {
              Object RESULT =null;
		System.out.println("def barras recurcion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= DEF PIE LLAVEA INTERPIE LLAVEC INICIO 
            {
              Object RESULT =null;
		System.out.println("def pie recursion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en la expresion general");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INTERPIE ::= CIRCULAR 
            {
              Object RESULT =null;
		 try{graficas.add(new graficoPIe(graficoN.getTitulo(),graficoN.getTipo(),graficoN.getEtiquetas(),graficoN.getValores(),graficoN.getTotal(),graficoN.getUnir(),graficoN.getExtra())); graficoN.clearGrafica(); aumentarPie();}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTERPIE",17, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // CIRCULAR ::= TITULANDO CIRCULAR 
            {
              Object RESULT =null;
		System.out.println("titulo pie");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CIRCULAR",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // CIRCULAR ::= TIPANDO CIRCULAR 
            {
              Object RESULT =null;
		System.out.println("tipo pie");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CIRCULAR",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CIRCULAR ::= ETIQUETANDO CIRCULAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CIRCULAR",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CIRCULAR ::= TOTALIDAD CIRCULAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CIRCULAR",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CIRCULAR ::= VALORANDO CIRCULAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CIRCULAR",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CIRCULAR ::= UNIENDO CIRCULAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CIRCULAR",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CIRCULAR ::= PLUS CIRCULAR 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CIRCULAR",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CIRCULAR ::= error CIRCULAR 
            {
              Object RESULT =null;
		System.out.println("Error en la circular");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CIRCULAR",1, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CIRCULAR ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("CIRCULAR",1, ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INTERBARRAS ::= VERTICAL 
            {
              Object RESULT =null;
		 try{graficas.add(new graficoBarras(graficoN.getTitulo(),graficoN.getUnir(),graficoN.getEtiquetas(),graficoN.getValores())); graficoN.clearGrafica(); aumentarBarras();}catch(Exception e){e.printStackTrace();}  
              CUP$parser$result = parser.getSymbolFactory().newSymbol("INTERBARRAS",16, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // VERTICAL ::= TITULANDO VERTICAL 
            {
              Object RESULT =null;
		System.out.println("titulo barras");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VERTICAL",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // VERTICAL ::= HORIZONTAL VERTICAL 
            {
              Object RESULT =null;
		System.out.println("ejex barras");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VERTICAL",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // VERTICAL ::= ORDENADAS VERTICAL 
            {
              Object RESULT =null;
		System.out.println("ejey barras");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VERTICAL",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // VERTICAL ::= UNIENDO VERTICAL 
            {
              Object RESULT =null;
		System.out.println("uniendo barras");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VERTICAL",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VERTICAL ::= error VERTICAL 
            {
              Object RESULT =null;
		System.out.println("Error en vertical");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VERTICAL",2, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VERTICAL ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("VERTICAL",2, ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TITULANDO ::= TITULO DOSPUNTOS ID PUNTOCOMA 
            {
              Object RESULT =null;
		int titleleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int titleright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token title = (Token)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		try{graficoN.setTitulo(limpiarLexeme(title.getLexeme()));}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TITULANDO",3, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPANDO ::= TIPO DOSPUNTOS PORCENTAJE PUNTOCOMA 
            {
              Object RESULT =null;
		System.out.println("entro a tipo porcentaje");try{ graficoN.setTipo("Porcentaje");}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPANDO",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPANDO ::= TIPO DOSPUNTOS CANTIDAD PUNTOCOMA 
            {
              Object RESULT =null;
		System.out.println("entro a tipo cantidad"); try{ graficoN.setTipo("Cantidad");}catch(Exception e){e.printStackTrace();} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TIPANDO",4, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // ETIQUETANDO ::= ETIQUETAS DOSPUNTOS CORCHETEA ITEM CORCHETEC PUNTOCOMA 
            {
              Object RESULT =null;
		System.out.println("entro  a etiqueta");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ETIQUETANDO",5, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // TOTALIDAD ::= TOTAL DOSPUNTOS o_decimal PUNTOCOMA 
            {
              Object RESULT =null;
		int totalleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int totalright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double total = (Double)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("entro  a total"); try{graficoN.setTotal(total.doubleValue());}catch(Exception e){e.printStackTrace();} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TOTALIDAD",6, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // VALORANDO ::= VALORES DOSPUNTOS CORCHETEA EXPRESION CORCHETEC PUNTOCOMA 
            {
              Object RESULT =null;
		System.out.println("entro  a valor");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VALORANDO",7, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // UNIENDO ::= UNIR DOSPUNTOS CORCHETEA TUPLAS CORCHETEC PUNTOCOMA 
            {
              Object RESULT =null;
		System.out.println("entro a unir");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("UNIENDO",8, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // TUPLAS ::= LLAVEA o COMA o LLAVEC 
            {
              Object RESULT =null;
		int numero1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int numero1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer numero1 = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int numero2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int numero2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer numero2 = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("entro a tuplas"); try{graficoN.getUnir().add(new tupla(numero1,numero2));}catch(Exception e){e.printStackTrace();} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TUPLAS",13, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // TUPLAS ::= LLAVEA o COMA o LLAVEC COMA TUPLAS 
            {
              Object RESULT =null;
		int numero1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int numero1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Integer numero1 = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int numero2left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int numero2right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Integer numero2 = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		System.out.println("entro a tuplas recursividad"); try{graficoN.getUnir().add(new tupla(numero1,numero2));}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TUPLAS",13, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // TUPLAS ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en tuplas");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TUPLAS",13, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PLUS ::= EXTRA DOSPUNTOS ID PUNTOCOMA 
            {
              Object RESULT =null;
		int extraleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int extraright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token extra = (Token)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		System.out.println("entro  a extra"); try{graficoN.setExtra(limpiarLexeme(extra.getLexeme()));}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLUS",9, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PLUS ::= error EXTRA 
            {
              Object RESULT =null;
		System.out.println("Error en extra");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("PLUS",9, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ORDENADAS ::= EJEY DOSPUNTOS CORCHETEA EXPRESION CORCHETEC PUNTOCOMA 
            {
              Object RESULT =null;
		System.out.println("entro a ejey");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ORDENADAS",11, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // HORIZONTAL ::= EJEX DOSPUNTOS CORCHETEA ITEM CORCHETEC PUNTOCOMA 
            {
              Object RESULT =null;
		System.out.println("entro  a ejex");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("HORIZONTAL",10, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ITEM ::= ID COMA ITEM 
            {
              Object RESULT =null;
		int itemleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int itemright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Token item = (Token)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("entro a item recursivo"); try{graficoN.getEtiquetas().add(limpiarLexeme(item.getLexeme()));}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEM",12, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ITEM ::= ID 
            {
              Object RESULT =null;
		int itemleft = ((Symbol)CUP$parser$stack.peek()).left;
		int itemright = ((Symbol)CUP$parser$stack.peek()).right;
		Token item = (Token)((Symbol) CUP$parser$stack.peek()).value;
		System.out.println("entro  a item"); try{graficoN.getEtiquetas().add(limpiarLexeme(item.getLexeme()));}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEM",12, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ITEM ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en item");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ITEM",12, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPRESION ::= o_decimal COMA EXPRESION 
            {
              Object RESULT =null;
		int numeroleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numeroright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double numero = (Double)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		System.out.println("entro a expresion recursiva"); try{graficoN.getValores().add(numero.doubleValue());}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPRESION ::= o_decimal 
            {
              Object RESULT =null;
		int numeroleft = ((Symbol)CUP$parser$stack.peek()).left;
		int numeroright = ((Symbol)CUP$parser$stack.peek()).right;
		Double numero = (Double)((Symbol) CUP$parser$stack.peek()).value;
		System.out.println("entro a expresion"); try{graficoN.getValores().add(numero.doubleValue());}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",15, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // o ::= o MAS o 
            {
              Integer RESULT =null;
		int numero1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer numero1 = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int signoleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int signoright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token signo = (Token)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((Symbol)CUP$parser$stack.peek()).right;
		Integer numero2 = (Integer)((Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = new Integer(numero1.intValue()+numero2.intValue());  countOperacion newOperation = new countOperacion("Suma",signo.getLine(),signo.getColumn(),String.valueOf(numero1+"+"+numero2));
      operacionesList.add(newOperation);}catch(Exception e){e.printStackTrace();} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // o ::= o MENOS o 
            {
              Integer RESULT =null;
		int numero1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer numero1 = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int signoleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int signoright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token signo = (Token)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((Symbol)CUP$parser$stack.peek()).right;
		Integer numero2 = (Integer)((Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = new Integer(numero1.intValue()-numero2.intValue());  countOperacion newOperation = new countOperacion("Resta",signo.getLine(),signo.getColumn(),String.valueOf(numero1+"-"+numero2));
      operacionesList.add(newOperation);}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // o ::= o DIVISION o 
            {
              Integer RESULT =null;
		int numero1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer numero1 = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int signoleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int signoright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token signo = (Token)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((Symbol)CUP$parser$stack.peek()).right;
		Integer numero2 = (Integer)((Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = new Integer(numero1.intValue()/numero2.intValue());  countOperacion newOperation = new countOperacion("Division",signo.getLine(),signo.getColumn(),String.valueOf(numero1+"/"+numero2));
      operacionesList.add(newOperation);}catch(Exception e){e.printStackTrace();} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // o ::= o MULTIPLICACION o 
            {
              Integer RESULT =null;
		int numero1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Integer numero1 = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int signoleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int signoright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token signo = (Token)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((Symbol)CUP$parser$stack.peek()).right;
		Integer numero2 = (Integer)((Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = new Integer(numero1.intValue()*numero2.intValue());  countOperacion newOperation = new countOperacion("Multiplicacion",signo.getLine(),signo.getColumn(),String.valueOf(numero1+"*"+numero2));
      operacionesList.add(newOperation);}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // o ::= ENTERO 
            {
              Integer RESULT =null;
		int numleft = ((Symbol)CUP$parser$stack.peek()).left;
		int numright = ((Symbol)CUP$parser$stack.peek()).right;
		Token num = (Token)((Symbol) CUP$parser$stack.peek()).value;
		System.out.println("encontro entero"); try{RESULT = Integer.valueOf(num.getLexeme());}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o",18, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // o ::= PARENTESISA o PARENTESISC 
            {
              Integer RESULT =null;
		int operacionleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operacionright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Integer operacion = (Integer)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		try{RESULT = operacion;}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o",18, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // o ::= error 
            {
              Integer RESULT =null;
		System.out.println("Error en operacion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o",18, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // o_decimal ::= o_decimal MAS o_decimal 
            {
              Double RESULT =null;
		int numero1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double numero1 = (Double)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int signoleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int signoright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token signo = (Token)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((Symbol)CUP$parser$stack.peek()).right;
		Double numero2 = (Double)((Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = new Double(numero1.doubleValue()+numero2.doubleValue());  countOperacion newOperation = new countOperacion("Suma",signo.getLine(),signo.getColumn(),String.valueOf(numero1+"+"+numero2));
      operacionesList.add(newOperation);}catch(Exception e){e.printStackTrace();} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o_decimal",19, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // o_decimal ::= o_decimal MENOS o_decimal 
            {
              Double RESULT =null;
		int numero1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double numero1 = (Double)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int signoleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int signoright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token signo = (Token)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((Symbol)CUP$parser$stack.peek()).right;
		Double numero2 = (Double)((Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = new Double(numero1.doubleValue()-numero2.doubleValue());  countOperacion newOperation = new countOperacion("Resta",signo.getLine(),signo.getColumn(),String.valueOf(numero1+"-"+numero2));
      operacionesList.add(newOperation);}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o_decimal",19, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // o_decimal ::= o_decimal DIVISION o_decimal 
            {
              Double RESULT =null;
		int numero1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double numero1 = (Double)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int signoleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int signoright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token signo = (Token)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((Symbol)CUP$parser$stack.peek()).right;
		Double numero2 = (Double)((Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = new Double(numero1.doubleValue()/numero2.doubleValue());  countOperacion newOperation = new countOperacion("Division",signo.getLine(),signo.getColumn(),String.valueOf(numero1+"/"+numero2));
      operacionesList.add(newOperation);}catch(Exception e){e.printStackTrace();} 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o_decimal",19, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // o_decimal ::= o_decimal MULTIPLICACION o_decimal 
            {
              Double RESULT =null;
		int numero1left = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int numero1right = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Double numero1 = (Double)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int signoleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int signoright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Token signo = (Token)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int numero2left = ((Symbol)CUP$parser$stack.peek()).left;
		int numero2right = ((Symbol)CUP$parser$stack.peek()).right;
		Double numero2 = (Double)((Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = new Double(numero1.doubleValue()*numero2.doubleValue());  countOperacion newOperation = new countOperacion("Multiplicacion",signo.getLine(),signo.getColumn(),String.valueOf(numero1+"*"+numero2));
      operacionesList.add(newOperation);}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o_decimal",19, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // o_decimal ::= ENTERO 
            {
              Double RESULT =null;
		int numleft = ((Symbol)CUP$parser$stack.peek()).left;
		int numright = ((Symbol)CUP$parser$stack.peek()).right;
		Token num = (Token)((Symbol) CUP$parser$stack.peek()).value;
		System.out.println("encontro entero"); try{RESULT = Double.valueOf(num.getLexeme());}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o_decimal",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // o_decimal ::= DECIMAL 
            {
              Double RESULT =null;
		int numleft = ((Symbol)CUP$parser$stack.peek()).left;
		int numright = ((Symbol)CUP$parser$stack.peek()).right;
		Token num = (Token)((Symbol) CUP$parser$stack.peek()).value;
		try{RESULT = Double.valueOf(num.getLexeme());}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o_decimal",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // o_decimal ::= PARENTESISA o_decimal PARENTESISC 
            {
              Double RESULT =null;
		int operacionleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int operacionright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Double operacion = (Double)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		try{RESULT = operacion;}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o_decimal",19, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // o_decimal ::= error 
            {
              Double RESULT =null;
		System.out.println("Error en operacion");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("o_decimal",19, ((Symbol)CUP$parser$stack.peek()), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EJECUCION ::= EJECUTAR PARENTESISA ID PARENTESISC PUNTOCOMA EJECUCION 
            {
              Object RESULT =null;
		int tituloleft = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int tituloright = ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Token titulo = (Token)((Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		System.out.println("entro a ejecutar");  try{listGraficasEjecucion.add(limpiarLexeme(titulo.getLexeme()));}catch(Exception e){e.printStackTrace();}
              CUP$parser$result = parser.getSymbolFactory().newSymbol("EJECUCION",14, ((Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EJECUCION ::= 
            {
              Object RESULT =null;

              CUP$parser$result = parser.getSymbolFactory().newSymbol("EJECUCION",14, ((Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
